[
  {
    "question": "<p><b>Crie uma fun√ß√£o com o nome <u>menu</u></b> que <i>retorne uma string</i> com o seguinte conte√∫do formatado:</p><pre><code>1 - Ver Saldo | 2 - Transferir | 3 - Calcular Juros | 4 - Sair</code></pre><p style='color: darkred;'><b>‚ö†Ô∏è Importante:</b> O retorno deve ser exatamente igual ao exemplo acima. N√£o retorne <code>print</code>, retorne uma <code>string</code>.</p>",
    "minScore": 75,
    "tests": [
      {
        "name": "Menu correto",
        "code": "menu()",
        "expected": "1 - Ver Saldo | 2 - Transferir | 3 - Calcular Juros | 4 - Sair"
      }
    ]
  },
  {
    "question": "<p><b>Crie uma fun√ß√£o com o nome <u>escolherSessao</u></b> que receba um n√∫mero inteiro entre <b>1</b> e <b>4</b> e retorne o nome da se√ß√£o correspondente:</p><ul><li>1 ‚Üí 'Saldo'</li><li>2 ‚Üí 'Transfer√™ncia'</li><li>3 ‚Üí 'Juros'</li><li>4 ‚Üí 'Sair'</li></ul><p><b>üö® Dica:</b> Trate entradas inv√°lidas retornando <code>'Op√ß√£o inv√°lida'</code>.</p>",
    "minScore": 75,
    "tests": [
      {
        "name": "Sess√£o v√°lida 1",
        "code": "escolherSessao(1)",
        "expected": "Saldo"
      },
      {
        "name": "Sess√£o v√°lida 4",
        "code": "escolherSessao(4)",
        "expected": "Sair"
      },
      {
        "name": "Sess√£o inv√°lida 5",
        "code": "escolherSessao(5)",
        "expected": "Op√ß√£o inv√°lida"
      },
      {
        "name": "Sess√£o negativa",
        "code": "escolherSessao(-1)",
        "expected": "Op√ß√£o inv√°lida"
      },
      {
        "name": "Sess√£o string",
        "code": "escolherSessao('2')",
        "expected": "Op√ß√£o inv√°lida"
      }
    ]
  },
  {
    "question": "<p><b>Crie uma fun√ß√£o com o nome <u>verSaldo</u></b> que receba um valor <i>num√©rico</i> e retorne a mensagem:</p><pre><code>Seu saldo √©: R$<valor></code></pre><p><b>üí° Exemplo:</b> Se o saldo for 200, retorne <code>Seu saldo √©: R$200</code>.</p><p style='color: darkred;'><b>‚ö†Ô∏è Aten√ß√£o:</b> Se o valor for negativo ou n√£o num√©rico, retorne <code>'Saldo inv√°lido'</code>.</p>",
    "minScore": 75,
    "tests": [
      {
        "name": "Saldo v√°lido",
        "code": "verSaldo(200)",
        "expected": "Seu saldo √©: R$200"
      },
      {
        "name": "Saldo zero",
        "code": "verSaldo(0)",
        "expected": "Seu saldo √©: R$0"
      },
      {
        "name": "Saldo negativo",
        "code": "verSaldo(-10)",
        "expected": "Saldo inv√°lido"
      },
      {
        "name": "Saldo texto",
        "code": "verSaldo('cem')",
        "expected": "Saldo inv√°lido"
      }
    ]
  },
  {
    "question": "<p><b>Crie uma fun√ß√£o com o nome <u>transferir</u></b> que receba dois valores:</p><ul><li><b>saldo</b></li><li><b>valorTransferencia</b></li></ul><p>A fun√ß√£o deve:</p><ul><li>Retornar o novo saldo se for poss√≠vel transferir</li><li>Retornar <code>'Saldo insuficiente'</code> se o valor for maior que o saldo</li><li>Retornar <code>'Valores inv√°lidos'</code> se qualquer valor for negativo ou n√£o num√©rico</li></ul>",
    "minScore": 75,
    "tests": [
      {
        "name": "Transfer√™ncia v√°lida",
        "code": "transferir(100, 30)",
        "expected": 70
      },
      {
        "name": "Transfer√™ncia total",
        "code": "transferir(50, 50)",
        "expected": 0
      },
      {
        "name": "Transfer√™ncia imposs√≠vel",
        "code": "transferir(40, 100)",
        "expected": "Saldo insuficiente"
      },
      {
        "name": "Transfer√™ncia com saldo negativo",
        "code": "transferir(-50, 10)",
        "expected": "Valores inv√°lidos"
      },
      {
        "name": "Transfer√™ncia com string",
        "code": "transferir('100', 30)",
        "expected": "Valores inv√°lidos"
      }
    ]
  },
  {
    "question": "<p><b>Crie uma fun√ß√£o com o nome <u>calcularJuros</u></b> que receba dois n√∫meros:</p><ul><li><b>valor</b>: valor base</li><li><b>taxa</b>: percentual de juros</li></ul><p>Ela deve retornar o valor final com juros simples, calculado como:</p><pre><code>valor * (1 + taxa / 100)</code></pre><p><b>‚ùó Exemplo:</b> <code>calcularJuros(200, 10)</code> retorna <code>220</code>.</p><p><b>‚ö†Ô∏è Valide:</b> Ambos os valores devem ser positivos. Se inv√°lidos, retorne <code>'Entrada inv√°lida'</code>.</p>",
    "minScore": 75,
    "tests": [
      {
        "name": "Juros normal",
        "code": "calcularJuros(200, 10)",
        "expected": 220
      },
      {
        "name": "Juros zero",
        "code": "calcularJuros(100, 0)",
        "expected": 100
      },
      {
        "name": "Juros com decimal",
        "code": "calcularJuros(200, 5.5)",
        "expected": 211
      },
      {
        "name": "Juros com valor negativo",
        "code": "calcularJuros(-200, 10)",
        "expected": "Entrada inv√°lida"
      },
      {
        "name": "Juros com string",
        "code": "calcularJuros(100, 'dez')",
        "expected": "Entrada inv√°lida"
      }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>aplicarTarifa</u></b> que subtrai uma taxa fixa do saldo e retorna o valor atualizado.</p>",
    "minScore": 75,
    "tests": [
      { "name": "Aplicando tarifa", "code": "aplicarTarifa(100, 5)", "expected": 95 }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>formatarDinheiro</u></b> que recebe um n√∫mero e retorna no formato: <code>'R$100.00'</code></p>",
    "minScore": 75,
    "tests": [
      { "name": "Formato com ponto", "code": "formatarDinheiro(100)", "expected": "R$100.00" }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>isSaldoPositivo</u></b> que retorna <code>True</code> se o saldo for maior que zero.</p>",
    "minScore": 75,
    "tests": [
      { "name": "Saldo positivo", "code": "isSaldoPositivo(50)", "expected": true },
      { "name": "Saldo zerado", "code": "isSaldoPositivo(0)", "expected": false }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>calcularMedia</u></b> que recebe uma lista de n√∫meros e retorna a m√©dia. Se a lista for vazia, retorne 0.</p>",
    "minScore": 75,
    "tests": [
      { "name": "M√©dia simples", "code": "calcularMedia([10, 20, 30])", "expected": 20 },
      { "name": "Lista vazia", "code": "calcularMedia([])", "expected": 0 }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>filtrarTransacoes</u></b> que recebe uma lista e retorna apenas os valores positivos.</p>",
    "minScore": 75,
    "tests": [
      { "name": "Com positivos e negativos", "code": "filtrarTransacoes([100, -20, 50])", "expected": [100, 50] }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>totalTransacoes</u></b> que soma apenas n√∫meros v√°lidos da lista (ignora strings e None).</p>",
    "minScore": 75,
    "tests": [
      { "name": "Com elementos inv√°lidos", "code": "totalTransacoes([100, 'erro', None, 50])", "expected": 150 }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>buscarMaior</u></b> que retorna o maior n√∫mero de uma lista ou <code>None</code> se estiver vazia.</p>",
    "minScore": 75,
    "tests": [
      { "name": "Maior n√∫mero", "code": "buscarMaior([10, 99, 35])", "expected": 99 },
      { "name": "Lista vazia", "code": "buscarMaior([])", "expected": null }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>verificarTransferencia</u></b> que retorna <code>'Transferido R$valor para nome'</code> ou <code>'Erro na transfer√™ncia'</code>.</p>",
    "minScore": 75,
    "tests": [
      { "name": "Transfer√™ncia v√°lida", "code": "verificarTransferencia(100, 50, 'Jo√£o')", "expected": "Transferido R$50 para Jo√£o" },
      { "name": "Saldo insuficiente", "code": "verificarTransferencia(10, 50, 'Ana')", "expected": "Erro na transfer√™ncia" }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>categorizarSaldo</u></b> que classifica o saldo:</p><ul><li>'Negativo'</li><li>'Baixo'</li><li>'Ok'</li><li>'Alto'</li></ul>",
    "minScore": 75,
    "tests": [
      { "name": "Saldo negativo", "code": "categorizarSaldo(-1)", "expected": "Negativo" },
      { "name": "Saldo alto", "code": "categorizarSaldo(1500)", "expected": "Alto" }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>criarConta</u></b> que recebe nome e saldo inicial e retorna um dicion√°rio com essas informa√ß√µes.</p>",
    "minScore": 75,
    "tests": [
      { "name": "Criando conta", "code": "criarConta('Lucas', 500)", "expected": {"nome": "Lucas", "saldo": 500} }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>depositar</u></b> que adiciona valor ao saldo da conta (dicion√°rio).</p>",
    "minScore": 75,
    "tests": [
      { "name": "Dep√≥sito simples", "code": "depositar({'nome': 'Lucas', 'saldo': 100}, 50)", "expected": {"nome": "Lucas", "saldo": 150} }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>sacar</u></b> que reduz o saldo da conta, se houver saldo suficiente. Caso contr√°rio, retorne <code>'Saldo insuficiente'</code>.</p>",
    "minScore": 75,
    "tests": [
      { "name": "Saque v√°lido", "code": "sacar({'nome': 'Lucas', 'saldo': 100}, 30)", "expected": {"nome": "Lucas", "saldo": 70} }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>gerarExtrato</u></b> que recebe uma lista de transa√ß√µes e retorna uma string formatada como extrato:</p><pre>1. +100\n2. -50</pre>",
    "minScore": 75,
    "tests": [
      { "name": "Extrato b√°sico", "code": "gerarExtrato([100, -50, 200])", "expected": "1. +100\n2. -50\n3. +200" }
    ]
  },
  {
    "question": "<p><b>Crie a fun√ß√£o <u>validarConta</u></b> que verifica se um dicion√°rio tem as chaves 'nome' e 'saldo' com tipos v√°lidos.</p>",
    "minScore": 75,
    "tests": [
      { "name": "Conta v√°lida", "code": "validarConta({'nome': 'Ana', 'saldo': 300})", "expected": true }
    ]
  }
]
